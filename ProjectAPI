Folder Model
file LocationData.cs

namespace Dummy_API1.Model
{
    public class LocationData
    {
        public double Latitude1 { get; set; }
        public double Longitude1 { get; set; }
        public double Latitude2 { get; set; }
        public double Longitude2 { get; set; }

        public string Lat1D { get; set; }
        public string Lat2D { get; set; }
        public string Lon1D { get; set; }
        public string Lon2D { get; set; }

        public double Distance { get; set; }
    }

}
****************************************************************************************************************************

Folder Service
file LocationService.cs

using System;

namespace Dummy_API1.Service
{
    public interface ILocationService
    {
        double CalculateDistance(double lat1, double lon1, double lat2, double lon2, string lat1d, string lat2d, string lon1d, string lon2d);
    }

    public class LocationService : ILocationService
    {
        public double CalculateDistance(double lat1, double lon1, double lat2, double lon2,string lat1d,string lat2d,string lon1d, string lon2d)
        {
            if(lat1d.ToLower() == "s")
                lat1 =  -lat1;
            if (lat2d.ToLower() == "s")
                lat1 = -lat1;
            if (lon1d.ToLower() == "w")
                lon1 = 360 - lon1;
            if (lon2d.ToLower() == "w")
                lon2 = 360 - lon2;
            double earthRadius = 3958.75;
            double dLat = ToRadian(lat2 - lat1);
            double dLon = ToRadian(lon2 - lon1);
            double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                       Math.Cos(ToRadian(lat1)) * Math.Cos(ToRadian(lat2)) *
                       Math.Sin(dLon / 2) * Math.Sin(dLon / 2);
            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
            double distance = earthRadius * c;
            return distance;
        }

        private double ToRadian(double val)
        {
            return (Math.PI / 180) * val;
        }
        // Implement the distance calculation logic (e.g., using the haversine formula)
        // Return the distance between the two points
        // You can find haversine formula implementations online.
    }
}

*******************************************************************************************************************

Startup.cs
Download this package -------- Microsoft.Extensions.DependencyInjection
using Dummy_API1.Service;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Dummy_API1
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddScoped<ILocationService, LocationService>();
            services.AddControllers();
            services.AddSwaggerGen(c =>
            {
               
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Dummy_API1", Version = "v1" });
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Dummy_API1 v1"));
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
**********************************************************************************************************************************
LocationController

using Dummy_API1.Model;
using Dummy_API1.Service;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace Dummy_API1.Controllers
{
    [ApiController]
    [Route("api/location")]
    public class LocationController : ControllerBase
    {
        private readonly ILocationService locationService;

        public LocationController(ILocationService service)
        {
            locationService = service;
        }

        [HttpPost("calculate-distance")]
        public IActionResult CalculateDistance([FromBody] LocationData locationData)
        {
            double distance = locationService.CalculateDistance(
                locationData.Latitude1, locationData.Longitude1,
                locationData.Latitude2, locationData.Longitude2, locationData.Lat1D, locationData.Lat2D,
                locationData.Lon1D, locationData.Lon2D);
            locationData.Distance = distance;
            return Ok(locationData);
        }
    }

}
